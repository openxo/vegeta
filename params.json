{"name":"Vegeta","tagline":"HTTP load testing tool and library. It's over 9000!","body":"# Vegeta [![Build Status](https://secure.travis-ci.org/tsenart/vegeta.png)](http://travis-ci.org/tsenart/vegeta)\r\n\r\nVegeta is a versatile HTTP load testing tool built out of need to drill\r\nHTTP services with a constant request rate.\r\nIt can be used both as a command line utility and a library.\r\n\r\n![Vegeta](http://fc09.deviantart.net/fs49/i/2009/198/c/c/ssj2_vegeta_by_trunks24.jpg)\r\n\r\n## Install\r\n### Pre-compiled executables\r\n* [Mac OSX 64 bit](https://dl.dropboxusercontent.com/u/83217940/vegeta-darwin-amd64-4ba3b43.tar.gz)\r\n* [Mac OSX 32 bit](https://dl.dropboxusercontent.com/u/83217940/vegeta-darwin-386-4ba3b43.tar.gz)\r\n* [Linux 64 bit](https://dl.dropboxusercontent.com/u/83217940/vegeta-linux-amd64-4ba3b43.tar.gz)\r\n* [Linux 32 bit](https://dl.dropboxusercontent.com/u/83217940/vegeta-linux-386-4ba3b43.tar.gz)\r\n\r\n### Source\r\nYou need go installed and `GOBIN` in your `PATH`. Once that is done, run the\r\ncommand:\r\n```shell\r\n$ go get github.com/tsenart/vegeta\r\n$ go install github.com/tsenart/vegeta\r\n```\r\n\r\n## Usage examples\r\n```shell\r\n$ echo \"GET http://localhost/\" | vegeta attack -rate=100 -duration=5s | vegeta report\r\n$ vegeta attack -targets=targets.txt > results.vr\r\n$ vegeta report -input=results.vr -reporter=json > metrics.json\r\n$ cat results.vr | vegeta report -reporter=plot > plot.html\r\n```\r\n\r\n## Usage manual\r\n```shell\r\n$ vegeta -h\r\nUsage: vegeta [globals] <command> [options]\r\n\r\nCommands:\r\n  attack  Hit the targets\r\n  report  Report the results\r\n\r\nGlobals:\r\n  -cpus=8 Number of CPUs to use\r\n```\r\n\r\n#### -cpus\r\nSpecifies the number of CPUs to be used internally.\r\nIt defaults to the amount of CPUs available in the system.\r\n\r\n### attack\r\n```shell\r\n$ vegeta attack -h\r\nUsage of attack:\r\n  -duration=10s: Duration of the test\r\n  -header=: Targets request header\r\n  -ordering=\"random\": Attack ordering [sequential, random]\r\n  -output=\"stdout\": Output file\r\n  -rate=50: Requests per second\r\n  -targets=\"stdin\": Targets file\r\n```\r\n\r\n#### -duration\r\nSpecifies the amount of time to issue request to the targets.\r\nThe internal concurrency structure's setup has this value as a variable.\r\nThe actual run time of the test can be longer than specified due to the\r\nresponses delay.\r\n\r\n#### -header\r\nSpecifies a request header to be used in all targets defined.\r\nYou can specify as many as needed by repeating the flag.\r\n\r\n#### -ordering\r\nSpecifies the ordering of target attack. The default is `random` and\r\nit will randomly pick one of the targets per request without ever choosing\r\nthat target again.\r\nThe other option is `sequential` and it does what you would expect it to\r\ndo.\r\n\r\n#### -output\r\nSpecifies the output file to which the binary results will be written\r\nto. Made to be piped to the report command input. Defaults to stdout.\r\n\r\n####  -rate\r\nSpecifies the requests per second rate to issue against\r\nthe targets. The actual request rate can vary slightly due to things like\r\ngarbage collection, but overall it should stay very close to the specified.\r\n\r\n#### -targets\r\nSpecifies the attack targets in a line sepated file, defaulting to stdin.\r\nThe format should be as follows.\r\n```\r\nGET http://goku:9090/path/to/dragon?item=balls\r\nGET http://user:password@goku:9090/path/to\r\nHEAD http://goku:9090/path/to/success\r\n...\r\n```\r\n\r\n### report\r\n```\r\n$ vegeta report -h\r\nUsage of report:\r\n  -input=\"stdin\": Input files (comma separated)\r\n  -output=\"stdout\": Output file\r\n  -reporter=\"text\": Reporter [text, json, plot]\r\n```\r\n\r\n#### -input\r\nSpecifies the input files to generate the report of, defaulting to stdin.\r\nThese are the output of vegeta attack. You can specify more than one (comma\r\nseparated) and they will be merged and sorted before being used by the\r\nreports.\r\n\r\n#### -output\r\nSpecifies the output file to which the report will be written to.\r\n\r\n#### -reporter\r\nSpecifies the kind of report to be generated. It defaults to text.\r\n\r\n##### text\r\n```\r\nRequests      [total]               1200\r\nLatencies     [mean, 95, 99, max]   223.340085ms, 326.913687ms, 416.537743ms, 7.788103259s\r\nBytes In      [total, mean]         3714690, 3095.57\r\nBytes Out     [total, mean]         0, 0.00\r\nSuccess       [ratio]               55.42%\r\nStatus Codes  [code:count]          0:535  200:665\r\nError Set:\r\nGet http://localhost:6060: dial tcp 127.0.0.1:6060: connection refused\r\nGet http://localhost:6060: read tcp 127.0.0.1:6060: connection reset by peer\r\nGet http://localhost:6060: dial tcp 127.0.0.1:6060: connection reset by peer\r\nGet http://localhost:6060: write tcp 127.0.0.1:6060: broken pipe\r\nGet http://localhost:6060: net/http: transport closed before response was received\r\nGet http://localhost:6060: http: can't write HTTP request on broken connection\r\n```\r\n\r\n##### json\r\n```json\r\n{\r\n  \"latencies\": {\r\n    \"mean\": 9093653647,\r\n    \"95th\": 12553709381,\r\n    \"99th\": 12604629125,\r\n    \"max\": 12604629125\r\n  },\r\n  \"bytes_in\": {\r\n    \"total\": 782040,\r\n    \"mean\": 651.7\r\n  },\r\n  \"bytes_out\": {\r\n    \"total\": 0,\r\n    \"mean\": 0\r\n  },\r\n  \"requests\": 1200,\r\n  \"success\": 0.11666666666666667,\r\n  \"status_codes\": {\r\n    \"0\": 1060,\r\n    \"200\": 140\r\n  },\r\n  \"errors\": [\r\n    \"Get http://localhost:6060: dial tcp 127.0.0.1:6060: operation timed out\"\r\n  ]\r\n}\r\n```\r\n##### plot\r\nGenerates an HTML5 page with an interactive plot based on\r\n[Dygraphs](http://dygraphs.com).\r\nClick and drag to select a region to zoom into. Double click to zoom\r\nout.\r\nInput a different number on the bottom left corner input field\r\nto change the moving average window size (in data points).\r\n\r\n![Plot](https://dl.dropboxusercontent.com/u/83217940/plot.png)\r\n\r\n\r\n## Usage (Library)\r\n```go\r\npackage main\r\n\r\nimport (\r\n  vegeta \"github.com/tsenart/vegeta/lib\"\r\n  \"time\"\r\n  \"fmt\"\r\n)\r\n\r\nfunc main() {\r\n  targets, _ := vegeta.NewTargets([]string{\"GET http://localhost:9100/\"})\r\n  rate := uint64(100) // per second\r\n  duration := 4 * time.Second\r\n\r\n  results := vegeta.Attack(targets, rate, duration)\r\n  metrics := vegeta.NewMetrics(results)\r\n\r\n  fmt.Printf(\"Mean latency: %s\", metrics.Latencies.Mean)\r\n}\r\n```\r\n\r\n#### Limitations\r\nThere will be an upper bound of the supported `rate` which varies on the\r\nmachine being used.\r\nYou could be CPU bound (unlikely), memory bound (more likely) or\r\nhave system resource limits being reached which ought to be tuned for\r\nthe process execution. The important limits for us are file descriptors\r\nand processes. On a UNIX system you can get and set the current\r\nsoft-limit values for a user.\r\n```shell\r\n$ ulimit -n # file descriptors\r\n2560\r\n$ ulimit -u # processes / threads\r\n709\r\n```\r\nJust pass a new number as the argument to change it.\r\n\r\n## Licence\r\n```\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 Tom√°s Senart\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n```\r\n","google":"UA-44119596-2","note":"Don't delete this file! It's used internally to help with page regeneration."}